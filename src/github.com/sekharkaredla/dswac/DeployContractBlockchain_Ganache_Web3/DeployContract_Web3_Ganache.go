package main

import (
	"fmt"
	big "math/big"
	"os"

	web3 "github.com/regcostajr/go-web3"
	dto "github.com/regcostajr/go-web3/dto"
	providers "github.com/regcostajr/go-web3/providers"
)

func main() {
	bytecode := "608060405234801561001057600080fd5b506040516105e73803806105e78339810180604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b505092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600090805190602001906100dd9291906100e4565b5050610189565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012557805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610152578251825591602001919060010190610137565b5b5090506101609190610164565b5090565b61018691905b8082111561018257600081600090555060010161016a565b5090565b90565b61044f806101986000396000f3fe608060405234801561001057600080fd5b506004361061005e576000357c0100000000000000000000000000000000000000000000000000000000900480632cd38f8c146100635780633b04e3a3146100e657806374c81a9c146101a1575b600080fd5b61006b610224565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ab578082015181840152602081019050610090565b50505050905090810190601f1680156100d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61019f600480360360208110156100fc57600080fd5b810190808035906020019064010000000081111561011957600080fd5b82018360208201111561012b57600080fd5b8035906020019184600183028401116401000000008311171561014d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102c6565b005b6101a96102e0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101e95780820151818401526020810190506101ce565b50505050905090810190601f1680156102165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102bc5780601f10610291576101008083540402835291602001916102bc565b820191906000526020600020905b81548152906001019060200180831161029f57829003601f168201915b5050505050905090565b80600090805190602001906102dc92919061037e565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103765780601f1061034b57610100808354040283529160200191610376565b820191906000526020600020905b81548152906001019060200180831161035957829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103bf57805160ff19168380011785556103ed565b828001600101855582156103ed579182015b828111156103ec5782518255916020019190600101906103d1565b5b5090506103fa91906103fe565b5090565b61042091905b8082111561041c576000816000905550600101610404565b5090565b9056fea165627a7a72305820299d22641c37c33f5d675ffd525971c285eb71820ee394c91ca4d7603b19c9a30029"
	abi := `[{"constant":true,"inputs":[],"name":"getJWT","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newJWT","type":"bytes"}],"name":"setJWT","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"JWT","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialJWT","type":"bytes"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]`
	var connection = web3.NewWeb3(providers.NewHTTPProvider("127.0.0.1:8545", 10, false))
	contract, err := connection.Eth.NewContract(abi)
	if err != nil {
		fmt.Errorf("error generating contract with ABI")
	}
	transaction := new(dto.TransactionParameters)
	Accounts, err := connection.Eth.ListAccounts()
	if err != nil {
		fmt.Errorf("error getting the accounts")
	}
	fmt.Println("Accounts : ", Accounts)
	transaction.From = Accounts[0]
	transaction.To = Accounts[1]
	transaction.Gas = big.NewInt(90000000000)
	transaction.Data = "sample data"
	hash, err := contract.Deploy(transaction, bytecode, nil)
	if err != nil {
		fmt.Println("error deploying the contract : ", err)
		os.Exit(-1)
	}
	fmt.Println("Hash:", hash)
}
