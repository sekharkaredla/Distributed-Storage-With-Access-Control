package main

import (
	"fmt"
	big "math/big"
	"os"

	web3 "github.com/regcostajr/go-web3"
	dto "github.com/regcostajr/go-web3/dto"
	providers "github.com/regcostajr/go-web3/providers"
)

func main() {
	bytecode := "608060405234801561001057600080fd5b506040516106013803806106018339810180604052602081101561003357600080fd5b81019080805164010000000081111561004b57600080fd5b8281019050602081018481111561006157600080fd5b815185600182028301116401000000008211171561007e57600080fd5b505092919050505033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600090805190602001906100dd9291906100e4565b5050610189565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061012557805160ff1916838001178555610153565b82800160010185558215610153579182015b82811115610152578251825591602001919060010190610137565b5b5090506101609190610164565b5090565b61018691905b8082111561018257600081600090555060010161016a565b5090565b90565b610469806101986000396000f3fe608060405260043610610051576000357c0100000000000000000000000000000000000000000000000000000000900480632cd38f8c146100565780633b04e3a3146100e657806374c81a9c146101ae575b600080fd5b34801561006257600080fd5b5061006b61023e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100ab578082015181840152602081019050610090565b50505050905090810190601f1680156100d85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156100f257600080fd5b506101ac6004803603602081101561010957600080fd5b810190808035906020019064010000000081111561012657600080fd5b82018360208201111561013857600080fd5b8035906020019184600183028401116401000000008311171561015a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506102e0565b005b3480156101ba57600080fd5b506101c36102fa565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102035780820151818401526020810190506101e8565b50505050905090810190601f1680156102305780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156102d65780601f106102ab576101008083540402835291602001916102d6565b820191906000526020600020905b8154815290600101906020018083116102b957829003601f168201915b5050505050905090565b80600090805190602001906102f6929190610398565b5050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103905780601f1061036557610100808354040283529160200191610390565b820191906000526020600020905b81548152906001019060200180831161037357829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103d957805160ff1916838001178555610407565b82800160010185558215610407579182015b828111156104065782518255916020019190600101906103eb565b5b5090506104149190610418565b5090565b61043a91905b8082111561043657600081600090555060010161041e565b5090565b9056fea165627a7a72305820fb27331c57af5c9642c4c9b97c1ba1cfdae26cfc36d2f8bf174a84e11e20e2820029"
	abi := `[{"constant":true,"inputs":[],"name":"getJWT","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"newJWT","type":"bytes"}],"name":"setJWT","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"JWT","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"initialJWT","type":"bytes"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]`
	var connection = web3.NewWeb3(providers.NewHTTPProvider("127.0.0.1:8545", 10, false))
	contract, err := connection.Eth.NewContract(abi)
	if err != nil {
		fmt.Errorf("error generating contract with ABI")
	}
	transaction := new(dto.TransactionParameters)
	coinbase, err := connection.Eth.GetCoinbase()
	if err != nil {
		fmt.Errorf("error getting the coinbase")
	}
	fmt.Println("Coinbase : ", coinbase)
	transaction.From = coinbase
	transaction.Gas = big.NewInt(1000000)
	fmt.Println(transaction)
	hash, err := contract.Deploy(transaction, bytecode, nil)
	fmt.Println(transaction.GasPrice)
	fmt.Println(hash,err)
	if err != nil {
		fmt.Println("error deploying the contract : ", err)
		os.Exit(-1)
	}
	fmt.Println(hash)
}
